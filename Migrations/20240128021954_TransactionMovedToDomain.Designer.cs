// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PicpayChallenge.Infra;

#nullable disable

namespace PicpayChallenge.Migrations
{
    [DbContext(typeof(PicpayDbContext))]
    [Migration("20240128021954_TransactionMovedToDomain")]
    partial class TransactionMovedToDomain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PicpayChallenge.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PicpayChallenge.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<string>("CPF_CNPJ")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5989e242-4c27-4ec5-abf2-b2f76378b904"),
                            Balance = 100.0,
                            CPF_CNPJ = "12345678953",
                            Email = "johndoe@example.com",
                            Name = "John Doe",
                            Password = "password123",
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("cea5646a-a641-4b08-88cb-c9ba51a06db7"),
                            Balance = 100.0,
                            CPF_CNPJ = "12332678921",
                            Email = "janesmith@example.com",
                            Name = "Jane Smith",
                            Password = "password123",
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("914b6023-3c48-4ef6-98f6-75b5a815e6fd"),
                            Balance = 76400.0,
                            CPF_CNPJ = "98765432132145",
                            Email = "merchant@example.com",
                            Name = "Merchant",
                            Password = "merchant123",
                            UserType = 1
                        },
                        new
                        {
                            Id = new Guid("260625f2-4afd-47c8-943d-698bfd7ab410"),
                            Balance = 0.0,
                            CPF_CNPJ = "56789012334",
                            Email = "normaluser@example.com",
                            Name = "Normal User",
                            Password = "normaluser123",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("PicpayChallenge.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PicpayChallenge.Domain.Entities.User", "FromUser")
                        .WithMany("ToTransactions")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PicpayChallenge.Domain.Entities.User", "ToUser")
                        .WithMany("FromTransactions")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("PicpayChallenge.Domain.Entities.User", b =>
                {
                    b.Navigation("FromTransactions");

                    b.Navigation("ToTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
